print(data)
#
# df = data.loc[data["Perioden"] == 2009]
# print(df)
# year = []
# for row in data.iterrows():
#     # print(data.Perioden)
#     if not row.Perioden in year:
#         year.append(row.Perioden)
#
#
# print(year)
   # print(row)
   # if data.loc[data["Perioden"] == 2009]:
   #     print(row)
   # for i in row:
   #     print(row[i])
   #     input()


# def get_nested_rec(key):
#     rec = {}
#     rec["﻿Perioden"] = key[0]
#     rec["Regio's"] = key[1]
#     rec["Totaal aantal lopend"] = key[2]
#     rec["Tot per 100.000 inwoners lopend"] = key[3]
#
#     return rec
#
#
# records = []
# for key in data.groupby(["﻿Perioden", "Regio's", "Totaal aantal lopend", "Tot per 100.000 inwoners lopend"]):
#     rec = get_nested_rec(key)
#     records.append(rec)
#
# records = dict(data = records)
#
#
# print(json.dumps(records, indent=4))

# def dataframe():
#     """
#     Output a dataframe from a CSV file containing the data per
#     specific columns
#     """
#     # Load in dataframe with missing values
#     data = pd.read_csv("datanetherlands.csv", sep=';')
#
#     df = data[["﻿Perioden", "Regio's", "Totaal aantal lopend", "Tot per 100.000 inwoners lopend", "Totaal aantal gesloten",
#     	"Tot per 100.000 inwoners gesloten", "Totaal aantal mannen lopend", "Tot per 100.000 inwoners mannen lopend",
#         "Totaal aantal mannen gesloten","Tot per 100.000 inwoners mannen gesloten",
#         "Totaal aantal vrouwen lopend", "Tot per 100.000 inwoners vrouwen lopend",
#         "Totaal aantal vrouwen gesloten", "Tot per 100.000 inwoners vrouwen gesloten",
#         "Tot lopend 0-20","Tot per 100.000 inwoners lopend 0-20", "Tot gesloten 0-20",
#         "Tot per 100.000 inwoners gesloten 0-20","Tot lopend 20-40","Tot per 100.000 inwoners lopend 20-40",
#         "Tot gesloten 20-40", "Tot per 100.000 inwoners gesloten 20-40", "Tot lopend 40-60",
#         "Tot per 100.000 inwoners lopend 40-60","Tot gesloten 40-60", "Tot per 100.000 inwoners gesloten 40-60",
#         "Tot lopend 60-80", "Tot per 100.000 inwoners lopend 60-80" "Tot gesloten 60-80",
#         "Tot per 100.000 inwoners gesloten 60-80", "Tot lopend 80-ouder","Tot per 100.000 inwoners lopend 80-ouder"
#         "Tot gesloten 80-ouder", "Tot per 100.000 inwoners gesloten 80-ouder", "Tot lopend mannen 0-20",
#         "Tot per 100.000 inwoners lopend mannen 0-20","Tot gesloten mannen 0-20","Tot per 100.000 inwoners gesloten mannen 0-20"
#         "Tot lopend mannen 20-40","Tot per 100.000 inwoners lopend mannen 20-40","Tot gesloten mannen 20-40",
#         "Tot per 100.000 inwoners gesloten mannen 20-40","Tot lopend mannen 40-60",
#         "Tot per 100.000 inwoners lopend mannen 40-60","Tot gesloten mannen 40-60",
#         "Tot per 100.000 inwoners gesloten mannen 40-60",
#         "Tot lopend mannen 60-80","Tot per 100.000 inwoners lopend mannen 60-80","Tot gesloten mannen 60-80",
#         "Tot per 100.000 inwoners gesloten mannen 60-80","Tot lopend mannen 80-ouder",
#         "Tot per 100.000 inwoners lopend mannen 80-ouder","Tot gesloten mannen 80-ouder",
#         "Tot per 100.000 inwoners gesloten mannen 80-ouder","Tot lopend vrouwen 0-20",
#         "Tot per 100.000 inwoners lopend vrouwen 0-20",	"Tot gesloten vrouwen 0-20",
#         "Tot per 100.000 inwoners gesloten vrouwen 0-20","Tot lopend vrouwen 20-40",
#         "Tot per 100.000 inwoners lopend vrouwen 20-40","Tot gesloten vrouwen 20-40",
#         "Tot per 100.000 inwoners gesloten vrouwen 20-40",	"Tot lopend vrouwen 40-60",
#         "Tot per 100.000 inwoners lopend vrouwen 40-60","Tot gesloten vrouwen 40-60",
#         "Tot per 100.000 inwoners gesloten vrouwen 40-60","Tot lopend vrouwen 60-80",
#         "Tot per 100.000 inwoners lopend vrouwen 60-80","Tot gesloten vrouwen 60-80",
#         "Tot per 100.000 inwoners gesloten vrouwen 60-80","Tot lopend vrouwen 80-ouder",
#         "Tot per 100.000 inwoners lopend vrouwen 80-ouder",	"Tot gesloten vrouwen 80-ouder",
#         "Tot per 100.000 inwoners gesloten vrouwen 80-ouder","65+ totaal", "80+ totaal",
#         "65+ mannen","80+ mannen", "65+ vrouwen","80+ vrouwen"]]
#
#     df.set_index("ISO", inplace=True)
#
#     # Return dataframe
#     return df
#
#
# def clean_up(dataframe):
#     """
#     Function for cleaning up the dataframe. String are being removed
#     and replaced by floats. Rows with missing values are removed and
#     rows with outstanding values that are not representative are also
#     deleted.
#     """
#     # Remove the strings and replace
#
# if __name__ == "__main__":
#     # Load in CSV file and save
#     dataframe = dataframe()
#
#
#     # Write cleaned data to JSON file
#     cleaned.to_json("HPI_data.json", orient="index")



# # print(data)
    # for elt in json_doc[key]:
    #     print(elt)
    #     if elt["Perioden"] == data.Perioden:
    #         print("hoi")
    #     print(values)
    #     json_doc[key].append(values)



    function updateScatter(data = globaldata[0]){
      var val = this.value;
      // console.log(val);
      // console.log("hoi");

      var graph = d3v5.selectAll(".svg_scatter");
      // console.log(graph);
      var svg_scatterplot = d3v5.selectAll(".scatterplot");
      //
      //Width and height
      var w = 500;
      var h = 500;

      // Create margins and dimensions for the graph
      var margin = {top: 40, right: 40, bottom: 120, left: 90};
      var graphWidth = w - margin.left - margin.right;
      var graphHeight = h - margin.top - margin.bottom

      // Create groups for x and y
      var xAxis = graph.append('g')
                        .attr('transform', `translate(0, ${graphHeight})`);

      var yAxis = graph.append('g');

      // Set scales x and y and padding if necessary
      var yScale = d3v5.scaleLinear()
                    .domain([d3v5.min(data[val], d => d["65+ totaal"]), d3v5.max(data[val], d => d["65+ totaal"])])
                    .range([graphHeight, 0])
                    .nice();

      var xScale = d3v5.scaleLinear()
                    .domain([d3v5.min(data[val], d => d["Totaal aantal lopend"]), d3v5.max(data[val], d => d["Totaal aantal lopend"])])
                    .range([0, graphWidth])
                    .nice();

      // // Create circles
      // var dot = graph.selectAll("circle")
      //                 .data(data);

      // Join new data
      var dot = graph.selectAll("circle")
                        .data(data[val]);

      console.log(data[val]);
      dot.enter()
          .append("circle")
          .attr("r", "5")
          .attr("cx", function(d) {console.log(xScale(d["Totaal aantal lopend"]));return xScale(d["Totaal aantal lopend"])})
          .attr("cy", d => yScale(d["65+ totaal"]));


        // Create and call the axes
        var x = d3v5.axisBottom(xScale);
        var y = d3v5.axisLeft(yScale);

        xAxis.call(x);
        yAxis.call(y);

      };




            // d3v5.select("#year").selectAll("option")
            //     .on("change", updateScatter);
          // updateScatter(data[d]);

          // d3v5.selectAll("year")
          //     .on("change", update);

        //   updateScatter(data["2009"]);
        //   document.getElementById("year").onchange = function(){
        //     var year = this.value
        //     // var cat = document.getElementById("")
        //   updateScatter(data[year])
        // }

Updatemap
        //   keys = Object.keys(globaldata[1]);
        //   console.log(keys);
        //   keys.forEach(function(key){
        //     Object.values(globaldata[1]).forEach(function(d){
        //         var val = d[key]["Perioden"];
        //         console.log(val);
        //   })
        // })
          // data1 = globaldata[1]
          // Object.keys(data1).forEach(function(key){
          //   data1[key].forEach(function(value){
          //     var val = value;
          //   })});


          // function totalDropdown(data){
          //
          //   keys = Object.keys(data)
          //   man = []
          //   keys.forEach(function(key){
          //     data[key].forEach(function(value){
          //         man[value["Perioden"]].push({
          //         "Totaal gesloten mannen": value["Totaal aantal mannen gesloten"]
          //       })
          //     })
          // });
          // console.log(man);
          // };
